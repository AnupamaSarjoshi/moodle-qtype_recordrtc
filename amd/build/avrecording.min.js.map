{"version":3,"file":"avrecording.min.js","sources":["../src/avrecording.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n//\r\n\r\n/**\r\n * JavaScript to the recording work.\r\n *\r\n * We would like to thank the creators of atto_recordrtc, whose\r\n * work originally inspired this.\r\n *\r\n * This script uses some third-party JavaScript and loading that within Moodle/ES6\r\n * requires some contortions. The main classes here are:\r\n *\r\n * * Recorder - represents one recording widget. This works in a way that is\r\n *   not particularly specific to this question type.\r\n * * RecordRtcQuestion - represents one question, which may contain several recorders.\r\n *   It deals with the interaction between the recorders and the question.\r\n *\r\n * @module    qtype_recordrtc/avrecording\r\n * @copyright 2019 The Open University\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Log from 'core/log';\r\nimport ModalFactory from 'core/modal_factory';\r\n\r\n/**\r\n * Verify that the question type can work. If not, show a warning.\r\n *\r\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\r\n */\r\nfunction checkCanWork() {\r\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\r\n        return 'nowebrtc';\r\n    }\r\n\r\n    if (!(location.protocol === 'https:' || location.host.indexOf('localhost') !== -1)) {\r\n        return 'nothttps';\r\n    }\r\n\r\n    return 'ok';\r\n}\r\n\r\n/**\r\n * Object for actually doing the recording.\r\n *\r\n * The recorder can be in one of several states, which is stored in a data-state\r\n * attribute on the outer span (widget). The states are:\r\n *\r\n *  - new:       there is no recording yet. Button shows 'Start recording' (audio) or 'Start camera' (video).\r\n *  - starting:  (video only) camera has started, but we are not recording yet. Button show 'Start recording'.\r\n *  - recording: Media is being recorded. Pause button visible if allowed. Main button shows 'Stop'. Countdown displayed.\r\n *  - paused:    If pause was pressed. Media recording paused, but resumable. Pause button changed to say 'resume'.\r\n *  - saving:    Media being uploaded. Progress indication shown. Pause button hidden if was visible.\r\n *  - recorded:  Recording and upload complete. Buttons shows 'Record again'.\r\n *\r\n * @param {HTMLElement} widget the DOM node that is the top level of the whole recorder.\r\n * @param {(AudioSettings|VideoSettings)} mediaSettings information about the media type.\r\n * @param {Object} owner the object we are doing the recording for. Must provide three callback functions\r\n *                       showAlert notifyRecordingComplete notifyButtonStatesChanged.\r\n * @param {Object} uploadInfo object with fields uploadRepositoryId, draftItemId, contextId and maxUploadSize.\r\n * @constructor\r\n */\r\nfunction Recorder(widget, mediaSettings, owner, uploadInfo) {\r\n    /**\r\n     * @type {Recorder} reference to this recorder, for use in event handlers.\r\n     */\r\n    const recorder = this;\r\n\r\n    /**\r\n     * @type {MediaStream} during recording, the stream of incoming media.\r\n     */\r\n    let mediaStream = null;\r\n\r\n    /**\r\n     * @type {MediaRecorder} the recorder that is capturing stream.\r\n     */\r\n    let mediaRecorder = null;\r\n\r\n    /**\r\n     * @type {Blob[]} the chunks of data that have been captured so far during the current recording.\r\n     */\r\n    let chunks = [];\r\n\r\n    /**\r\n     * @type {number} number of bytes recorded so far, so we can auto-stop\r\n     * before hitting Moodle's file-size limit.\r\n     */\r\n    let bytesRecordedSoFar = 0;\r\n\r\n    /**\r\n     * @type {number} when paused, the time left in milliseconds, so we can auto-stop at the time limit.\r\n     */\r\n    let timeRemaining = 0;\r\n\r\n    /**\r\n     * @type {number} while recording, the time we reach the time-limit, so we can auto-stop then.\r\n     * This is milliseconds since Unix epoch, so comparable with Date.now().\r\n     */\r\n    let stopTime = 0;\r\n\r\n    /**\r\n     * @type {number} intervalID returned by setInterval() while the timer is running.\r\n     */\r\n    let countdownTicker = 0;\r\n\r\n    const button = widget.querySelector('button.qtype_recordrtc-main-button');\r\n    const pauseButton = widget.querySelector('.qtype_recordrtc-pause-button button');\r\n    const controlRow = widget.querySelector('.qtype_recordrtc-control-row');\r\n    const mediaElement = widget.querySelector('.qtype_recordrtc-media-player ' + mediaSettings.name);\r\n    const noMediaPlaceholder = widget.querySelector('.qtype_recordrtc-no-recording-placeholder');\r\n    const timeDisplay = widget.querySelector('.qtype_recordrtc-time-left');\r\n    const progressBar = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front');\r\n    const backTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-end');\r\n    const backtimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-back span.timer-start');\r\n    const frontTimeEnd = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-end');\r\n    const fronttimeStart = widget.querySelector('.qtype_recordrtc-time-left .qtype_recordrtc-timer-front span.timer-start');\r\n\r\n    widget.addEventListener('click', handleButtonClick);\r\n    this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\r\n\r\n    /**\r\n     * Handles clicks on the start/stop and pause buttons.\r\n     *\r\n     * @param {Event} e\r\n     */\r\n    function handleButtonClick(e) {\r\n        const clickedButton = e.target.closest('button');\r\n        if (!clickedButton) {\r\n            return; // Not actually a button click.\r\n        }\r\n        e.preventDefault();\r\n        switch (widget.dataset.state) {\r\n            case 'new':\r\n            case 'recorded':\r\n                startRecording();\r\n                break;\r\n            case 'starting':\r\n                startSaving();\r\n                break;\r\n            case 'recording':\r\n                if (clickedButton === pauseButton) {\r\n                    pause();\r\n                } else {\r\n                    stopRecording();\r\n                }\r\n                break;\r\n            case 'paused':\r\n                if (clickedButton === pauseButton) {\r\n                    resume();\r\n                } else {\r\n                    stopRecording();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start recording (because the button was clicked).\r\n     */\r\n    function startRecording() {\r\n\r\n        // Reset timer label.\r\n        setLabelForTimer(0, parseInt(widget.dataset.maxRecordingDuration));\r\n\r\n        if (mediaSettings.name === 'audio') {\r\n            mediaElement.parentElement.classList.add('hide');\r\n            noMediaPlaceholder.classList.add('hide');\r\n            timeDisplay.classList.remove('hide');\r\n\r\n        } else {\r\n            mediaElement.parentElement.classList.remove('hide');\r\n            noMediaPlaceholder.classList.add('hide');\r\n        }\r\n        pauseButton?.parentElement.classList.remove('hide');\r\n\r\n        // Change look of recording button.\r\n        button.classList.remove('btn-outline-danger');\r\n        button.classList.add('btn-danger');\r\n\r\n        // Disable other question buttons when current widget stared recording.\r\n        disableAllButtons();\r\n\r\n        // Empty the array containing the previously recorded chunks.\r\n        chunks = [];\r\n        bytesRecordedSoFar = 0;\r\n        navigator.mediaDevices.getUserMedia(mediaSettings.mediaConstraints)\r\n            .then(handleCaptureStarting)\r\n            .catch(handleCaptureFailed);\r\n    }\r\n\r\n    /**\r\n     * Callback once getUserMedia has permission from the user to access the recording devices.\r\n     *\r\n     * @param {MediaStream} stream the stream to record.\r\n     */\r\n    function handleCaptureStarting(stream) {\r\n        mediaStream = stream;\r\n\r\n        // Setup the UI for during recording.\r\n        mediaElement.srcObject = stream;\r\n        mediaElement.muted = true;\r\n        if (mediaSettings.name === 'audio') {\r\n            startSaving();\r\n        } else {\r\n            mediaElement.play();\r\n            mediaElement.controls = false;\r\n\r\n            widget.dataset.state = 'starting';\r\n            setButtonLabel('startrecording');\r\n            widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\r\n        }\r\n\r\n        // Make button clickable again, to allow starting/stopping recording.\r\n        if (pauseButton) {\r\n            pauseButton.disabled = false;\r\n        }\r\n        button.disabled = false;\r\n        button.focus();\r\n    }\r\n\r\n    /**\r\n     * For recording types which show the media during recording,\r\n     * this starts the loop-back display, but does not start recording it yet.\r\n     */\r\n    function startSaving() {\r\n        // Initialize MediaRecorder events and start recording.\r\n        mediaRecorder = new MediaRecorder(mediaStream, getRecordingOptions());\r\n\r\n        mediaRecorder.ondataavailable = handleDataAvailable;\r\n        mediaRecorder.onpause = handleDataAvailable;\r\n        mediaRecorder.onstop = handleRecordingHasStopped;\r\n        mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\r\n\r\n        widget.dataset.state = 'recording';\r\n        // Set duration for progressbar and start animate.\r\n        progressBar.style.animationDuration = widget.dataset.maxRecordingDuration + 's';\r\n        progressBar.classList.add('animate');\r\n        setButtonLabel('stoprecording');\r\n        startCountdownTimer();\r\n        if (mediaSettings.name === 'video') {\r\n            button.parentElement.classList.add('hide');\r\n            controlRow.classList.remove('hide');\r\n            controlRow.classList.add('d-flex');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the media system for each Chunk of data.\r\n     *\r\n     * @param {BlobEvent} event\r\n     */\r\n    function handleDataAvailable(event) {\r\n        if (!event.data) {\r\n            return; // It seems this can happen around pausing.\r\n        }\r\n\r\n        // Check there is space to store the next chunk, and if not stop.\r\n        bytesRecordedSoFar += event.data.size;\r\n        if (uploadInfo.maxUploadSize >= 0 && bytesRecordedSoFar >= uploadInfo.maxUploadSize) {\r\n\r\n            // Extra check to avoid alerting twice.\r\n            if (!localStorage.getItem('alerted')) {\r\n                localStorage.setItem('alerted', 'true');\r\n                stopRecording();\r\n                owner.showAlert('nearingmaxsize');\r\n\r\n            } else {\r\n                localStorage.removeItem('alerted');\r\n            }\r\n        }\r\n\r\n        // Store the next chunk of data.\r\n        chunks.push(event.data);\r\n\r\n        // Notify form-change-checker that there is now unsaved data.\r\n        // But, don't do this in question preview where it is just annoying.\r\n        if (typeof M.core_formchangechecker !== 'undefined' &&\r\n            !window.location.pathname.endsWith('/question/preview.php')) {\r\n            M.core_formchangechecker.set_form_changed();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pause recording.\r\n     */\r\n    function pause() {\r\n        // Stop the count-down timer.\r\n        stopCountdownTimer();\r\n        setPauseButtonLabel('resume');\r\n        mediaRecorder.pause();\r\n        widget.dataset.state = 'paused';\r\n        // Pause animate.\r\n        toggleProgressbarState();\r\n    }\r\n\r\n    /**\r\n     * Continue recording.\r\n     */\r\n    function resume() {\r\n        // Stop the count-down timer.\r\n        resumeCountdownTimer();\r\n        widget.dataset.state = 'recording';\r\n        setPauseButtonLabel('pause');\r\n        mediaRecorder.resume();\r\n        // Resume animate.\r\n        toggleProgressbarState();\r\n    }\r\n\r\n    /**\r\n     * Start recording (because the button was clicked or because we have reached a limit).\r\n     */\r\n    function stopRecording() {\r\n        // Disable the button while things change.\r\n        button.disabled = true;\r\n\r\n        // Stop the count-down timer.\r\n        stopCountdownTimer();\r\n\r\n        // Update the button.\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        if (pauseButton) {\r\n            setPauseButtonLabel('pause');\r\n            pauseButton.parentElement.classList.add('hide');\r\n        }\r\n\r\n        // Reset animation state.\r\n        progressBar.style.animationPlayState = 'running';\r\n        // Stop animate.\r\n        progressBar.classList.remove('animate');\r\n\r\n        // Ask the recording to stop.\r\n        mediaRecorder.stop();\r\n\r\n        // Also stop each individual MediaTrack.\r\n        const tracks = mediaStream.getTracks();\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            tracks[i].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback that is called by the media system once recording has finished.\r\n     */\r\n    function handleRecordingHasStopped() {\r\n        if (widget.dataset.state === 'new') {\r\n            // This can happens if an error occurs when recording is starting. Do nothing.\r\n            return;\r\n        }\r\n\r\n        // Set source of the media player.\r\n        const blob = new Blob(chunks, {type: mediaRecorder.mimeType});\r\n        mediaElement.srcObject = null;\r\n        mediaElement.src = URL.createObjectURL(blob);\r\n\r\n        // Show audio player with controls enabled, and unmute.\r\n        mediaElement.muted = false;\r\n        mediaElement.controls = true;\r\n        mediaElement.parentElement.classList.remove('hide');\r\n        noMediaPlaceholder.classList.add('hide');\r\n        mediaElement.focus();\r\n\r\n        if (mediaSettings.name === 'audio') {\r\n            timeDisplay.classList.add('hide');\r\n\r\n        } else {\r\n            button.parentElement.classList.remove('hide');\r\n            controlRow.classList.add('hide');\r\n            controlRow.classList.remove('d-flex');\r\n        }\r\n\r\n        // Ensure the button while things change.\r\n        button.disabled = true;\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        widget.dataset.state = 'recorded';\r\n\r\n        if (chunks.length > 0) {\r\n            owner.notifyRecordingComplete(recorder);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function that handles errors from the recorder.\r\n     *\r\n     * @param {DOMException} error\r\n     */\r\n    function handleCaptureFailed(error) {\r\n        Log.debug('Audio/video question: error received');\r\n        Log.debug(error);\r\n\r\n        setPlaceholderMessage('recordingfailed');\r\n        setButtonLabel('recordagainx');\r\n        button.classList.remove('btn-danger');\r\n        button.classList.add('btn-outline-danger');\r\n        widget.dataset.state = 'new';\r\n        // Hide time display.\r\n        timeDisplay.classList.add('hide');\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\r\n        const stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\r\n\r\n        owner.showAlert(stringName);\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Start the countdown timer.\r\n     */\r\n    function startCountdownTimer() {\r\n        timeRemaining = widget.dataset.maxRecordingDuration * 1000;\r\n        resumeCountdownTimer();\r\n        updateTimerDisplay();\r\n    }\r\n\r\n    /**\r\n     * Stop the countdown timer.\r\n     */\r\n    function stopCountdownTimer() {\r\n        timeRemaining = stopTime - Date.now();\r\n        if (countdownTicker !== 0) {\r\n            clearInterval(countdownTicker);\r\n            countdownTicker = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start or resume the countdown timer.\r\n     */\r\n    function resumeCountdownTimer() {\r\n        stopTime = Date.now() + timeRemaining;\r\n        if (countdownTicker === 0) {\r\n            countdownTicker = setInterval(updateTimerDisplay, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the countdown timer, and stop recording if we have reached 0.\r\n     */\r\n    function updateTimerDisplay() {\r\n        const millisecondsRemaining = stopTime - Date.now();\r\n        const secondsRemaining = Math.round(millisecondsRemaining / 1000);\r\n        const secondsStart = widget.dataset.maxRecordingDuration - secondsRemaining;\r\n        // Set time label for elements.\r\n        setLabelForTimer(secondsStart, secondsRemaining);\r\n        if (millisecondsRemaining <= 0) {\r\n            stopRecording();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get time label for timer.\r\n     *\r\n     * @param {number} seconds The time in seconds.\r\n     * @return {string} The label for timer. e.g. '00:00' or '10:00'.\r\n     */\r\n    function getTimeLabelForTimer(seconds) {\r\n        const secs = seconds % 60;\r\n        const mins = Math.round((seconds - secs) / 60);\r\n\r\n        return M.util.get_string('timedisplay', 'qtype_recordrtc',\r\n            {mins: pad(mins), secs: pad(secs)});\r\n    }\r\n\r\n    /**\r\n     * Set time label for timer.\r\n     * We need to update the labels for both the timer back(whose background color is white) and\r\n     * timer front (with blue background) to create a text effect that contrasts with the background color.\r\n     *\r\n     * @param {Number} secondsStart The second start. e.g: With duration 1 minute\r\n     * secondsStart will start from 0 and increase up to 60.\r\n     * @param {Number} secondsRemaining The second remaining. e.g: With duration 1 minute\r\n     * secondsRemaining will decrease from 60 to 0.\r\n     */\r\n    function setLabelForTimer(secondsStart, secondsRemaining) {\r\n        // Set time label for timer back.\r\n        backTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\r\n        backtimeStart.innerText = getTimeLabelForTimer(secondsStart);\r\n        // Set time label for timer front.\r\n        frontTimeEnd.innerText = getTimeLabelForTimer(secondsRemaining);\r\n        fronttimeStart.innerText = getTimeLabelForTimer(secondsStart);\r\n    }\r\n\r\n    /**\r\n     * Zero-pad a string to be at least two characters long.\r\n     *\r\n     * @param {number} val e.g. 1 or 10\r\n     * @return {string} e.g. '01' or '10'.\r\n     */\r\n    function pad(val) {\r\n        const valString = val + '';\r\n\r\n        if (valString.length < 2) {\r\n            return '0' + valString;\r\n        } else {\r\n            return '' + valString;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger the upload of the recorded media back to Moodle.\r\n     */\r\n    function uploadMediaToServer() {\r\n        setButtonLabel('uploadpreparing');\r\n\r\n        // First we need to get the media data from the media element.\r\n        const fetchRequest = new XMLHttpRequest();\r\n        fetchRequest.open('GET', mediaElement.src);\r\n        fetchRequest.responseType = 'blob';\r\n        fetchRequest.addEventListener('load', handleRecordingFetched);\r\n        fetchRequest.send();\r\n    }\r\n\r\n    /**\r\n     * Callback called once we have the data from the media element, ready to upload to Moodle.\r\n     *\r\n     * @param {ProgressEvent} e\r\n     */\r\n    function handleRecordingFetched(e) {\r\n        const fetchRequest = e.target;\r\n        if (fetchRequest.status !== 200) {\r\n            // No data.\r\n            return;\r\n        }\r\n\r\n        // Blob is now the media that the audio/video tag's src pointed to.\r\n        const blob = fetchRequest.response;\r\n\r\n        // Create FormData to send to PHP filepicker-upload script.\r\n        const formData = new FormData();\r\n        formData.append('repo_upload_file', blob, widget.dataset.recordingFilename);\r\n        formData.append('sesskey', M.cfg.sesskey);\r\n        formData.append('repo_id', uploadInfo.uploadRepositoryId);\r\n        formData.append('itemid', uploadInfo.draftItemId);\r\n        formData.append('savepath', '/');\r\n        formData.append('ctx_id', uploadInfo.contextId);\r\n        formData.append('overwrite', '1');\r\n\r\n        const uploadRequest = new XMLHttpRequest();\r\n        uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\r\n        uploadRequest.upload.addEventListener('progress', handleUploadProgress);\r\n        uploadRequest.addEventListener('error', handleUploadError);\r\n        uploadRequest.addEventListener('abort', handleUploadAbort);\r\n        uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\r\n        uploadRequest.send(formData);\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload completes.\r\n     * @param {ProgressEvent} e\r\n     */\r\n    function handleUploadReadyStateChanged(e) {\r\n        const uploadRequest = e.target;\r\n        if (uploadRequest.readyState !== 4) {\r\n            return; // Not finished yet. We will get more of these events when it is.\r\n        }\r\n\r\n        const response = JSON.parse(uploadRequest.responseText);\r\n        if (response.errorcode) {\r\n            handleUploadError(); // Moodle sends back errors with a 200 status code for some reason!\r\n        }\r\n\r\n        if (uploadRequest.status === 200) {\r\n            // When request finished and successful.\r\n            setButtonLabel('recordagainx');\r\n            enableAllButtons();\r\n        } else if (uploadRequest.status === 404) {\r\n            setPlaceholderMessage('uploadfailed404');\r\n            enableAllButtons();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for updating the upload progress.\r\n     * @param {ProgressEvent} e\r\n     */\r\n    function handleUploadProgress(e) {\r\n        setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload fails with an error.\r\n     */\r\n    function handleUploadError() {\r\n        setPlaceholderMessage('uploadfailed');\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Callback for when the upload fails with an error.\r\n     */\r\n    function handleUploadAbort() {\r\n        setPlaceholderMessage('uploadaborted');\r\n        enableAllButtons();\r\n    }\r\n\r\n    /**\r\n     * Display a progress message in the upload progress area.\r\n     *\r\n     * @param {string} langString\r\n     * @param {string|null} [a] optional variable to populate placeholder with\r\n     */\r\n    function setButtonLabel(langString, a) {\r\n        if (!a) {\r\n            // Seemingly unnecessary space inside the span is needed for screen-readers, and it must be a non-breaking space.\r\n            a = '<span class=\"sr-only\">&nbsp;' + widget.dataset.widgetName + '</span>';\r\n        }\r\n        button.innerHTML = M.util.get_string(langString, 'qtype_recordrtc', a);\r\n    }\r\n\r\n    /**\r\n     * Display a progress message in the upload progress area.\r\n     *\r\n     * @param {string} langString\r\n     */\r\n    function setPauseButtonLabel(langString) {\r\n        pauseButton.innerText = M.util.get_string(langString, 'qtype_recordrtc');\r\n    }\r\n\r\n    /**\r\n     * Display a message in the upload progress area.\r\n     *\r\n     * @param {string} langString\r\n     */\r\n    function setPlaceholderMessage(langString) {\r\n        noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc');\r\n        mediaElement.parentElement.classList.add('hide');\r\n        noMediaPlaceholder.classList.remove('hide');\r\n    }\r\n\r\n    /**\r\n     * Select best options for the recording codec.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    function getRecordingOptions() {\r\n        const options = {};\r\n\r\n        // Get the relevant bit rates from settings.\r\n        if (mediaSettings.name === 'audio') {\r\n            options.audioBitsPerSecond = mediaSettings.bitRate;\r\n        } else if (mediaSettings.name === 'video') {\r\n            options.videoBitsPerSecond = mediaSettings.bitRate;\r\n            options.videoWidth = mediaSettings.width;\r\n            options.videoHeight = mediaSettings.height;\r\n\r\n            // Go through our list of mimeTypes, and take the first one that will work.\r\n            for (let i = 0; i < mediaSettings.mimeTypes.length; i++) {\r\n                if (MediaRecorder.isTypeSupported(mediaSettings.mimeTypes[i])) {\r\n                    options.mimeType = mediaSettings.mimeTypes[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Enable all buttons in the question.\r\n     */\r\n    function enableAllButtons() {\r\n        disableOrEnableButtons(true);\r\n        owner.notifyButtonStatesChanged();\r\n    }\r\n\r\n    /**\r\n     * Disable all buttons in the question.\r\n     */\r\n    function disableAllButtons() {\r\n        disableOrEnableButtons(false);\r\n    }\r\n\r\n    /**\r\n     * Disables/enables other question buttons when current widget started recording/finished recording.\r\n     *\r\n     * @param {boolean} enabled true if the button should be enabled.\r\n     */\r\n    function disableOrEnableButtons(enabled = false) {\r\n        widget.closest('.que').querySelectorAll('button, input[type=submit], input[type=button]').forEach(\r\n            function(button) {\r\n                button.disabled = !enabled;\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Pause/resume the progressbar state.\r\n     */\r\n    function toggleProgressbarState() {\r\n        const running = progressBar.style.animationPlayState || 'running';\r\n        progressBar.style.animationPlayState = running === 'running' ? 'paused' : 'running';\r\n    }\r\n}\r\n\r\n/**\r\n * Object that controls the settings for recording audio.\r\n *\r\n * @param {string} bitRate desired audio bitrate.\r\n * @constructor\r\n */\r\nfunction AudioSettings(bitRate) {\r\n    this.name = 'audio';\r\n    this.bitRate = parseInt(bitRate, 10);\r\n    this.mediaConstraints = {\r\n        audio: true\r\n    };\r\n    this.mimeTypes = [\r\n        'audio/webm;codecs=opus',\r\n        'audio/ogg;codecs=opus'\r\n    ];\r\n}\r\n\r\n/**\r\n * Object that controls the settings for recording video.\r\n *\r\n * @param {string} bitRate desired video bitrate.\r\n * @param {string} width desired width.\r\n * @param {string} height desired height.\r\n * @constructor\r\n */\r\nfunction VideoSettings(bitRate, width, height) {\r\n    this.name = 'video';\r\n    this.bitRate = parseInt(bitRate, 10);\r\n    this.width = parseInt(width, 10);\r\n    this.height = parseInt(height, 10);\r\n    this.mediaConstraints = {\r\n        audio: true,\r\n        video: {\r\n            width: {ideal: this.width},\r\n            height: {ideal: this.height}\r\n        }\r\n    };\r\n    this.mimeTypes = [\r\n        'video/webm;codecs=vp9,opus',\r\n        'video/webm;codecs=h264,opus',\r\n        'video/webm;codecs=vp8,opus'\r\n    ];\r\n}\r\n\r\n/**\r\n * Represents one record audio or video question.\r\n *\r\n * @param {string} questionId id of the outer question div.\r\n * @param {Object} settings like audio bit rate.\r\n * @constructor\r\n */\r\nfunction RecordRtcQuestion(questionId, settings) {\r\n    const questionDiv = document.getElementById(questionId);\r\n\r\n    // Check if the RTC API can work here.\r\n    const result = checkCanWork();\r\n    if (result === 'nothttps') {\r\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\r\n        return;\r\n    } else if (result === 'nowebrtc') {\r\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\r\n        return;\r\n    }\r\n\r\n    // Make the callback functions available.\r\n    this.showAlert = showAlert;\r\n    this.notifyRecordingComplete = notifyRecordingComplete;\r\n    this.notifyButtonStatesChanged = setSubmitButtonState;\r\n    const thisQuestion = this;\r\n\r\n    // We may have more than one widget in a question.\r\n    questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget').forEach(function(widget) {\r\n        // Get the appropriate options.\r\n        let typeInfo;\r\n        if (widget.dataset.mediaType === 'audio') {\r\n            typeInfo = new AudioSettings(settings.audioBitRate);\r\n        } else {\r\n            typeInfo = new VideoSettings(settings.videoBitRate, settings.videoWidth, settings.videoHeight);\r\n        }\r\n\r\n        // Create the recorder.\r\n        new Recorder(widget, typeInfo, thisQuestion, settings);\r\n        return 'Not used';\r\n    });\r\n    setSubmitButtonState();\r\n\r\n    /**\r\n     * Set the state of the question's submit button.\r\n     *\r\n     * If any recorder does not yet have a recording, then disable the button.\r\n     * Otherwise, enable it.\r\n     */\r\n    function setSubmitButtonState() {\r\n        let anyRecorded = false;\r\n        questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget').forEach(function(widget) {\r\n            if (widget.dataset.state === 'recorded') {\r\n                anyRecorded = true;\r\n            }\r\n        });\r\n        const submitButton = questionDiv.querySelector('input.submit[type=submit]');\r\n        if (submitButton) {\r\n            submitButton.disabled = !anyRecorded;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show a modal alert.\r\n     *\r\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\r\n     * @return {Promise}\r\n     */\r\n    function showAlert(subject) {\r\n        return ModalFactory.create({\r\n            type: ModalFactory.types.ALERT,\r\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\r\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\r\n        }).then(function(modal) {\r\n            modal.show();\r\n            return modal;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback called when the recording is completed.\r\n     *\r\n     * @param {Recorder} recorder the recorder.\r\n     */\r\n    function notifyRecordingComplete(recorder) {\r\n        recorder.uploadMediaToServer();\r\n    }\r\n}\r\n\r\n/**\r\n * Initialise a record audio or video question.\r\n *\r\n * @param {string} questionId id of the outer question div.\r\n * @param {Object} settings like audio bit rate.\r\n */\r\nfunction init(questionId, settings) {\r\n    M.util.js_pending('init-' + questionId);\r\n    new RecordRtcQuestion(questionId, settings);\r\n    M.util.js_complete('init-' + questionId);\r\n}\r\n\r\nexport {\r\n    init\r\n};\r\n"],"names":["Recorder","widget","mediaSettings","owner","uploadInfo","recorder","this","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","timeRemaining","stopTime","countdownTicker","button","querySelector","pauseButton","controlRow","mediaElement","name","noMediaPlaceholder","timeDisplay","progressBar","backTimeEnd","backtimeStart","frontTimeEnd","fronttimeStart","handleCaptureStarting","stream","srcObject","muted","startSaving","play","controls","dataset","state","setButtonLabel","disabled","focus","MediaRecorder","options","audioBitsPerSecond","bitRate","videoBitsPerSecond","videoWidth","width","videoHeight","height","i","mimeTypes","length","isTypeSupported","mimeType","getRecordingOptions","ondataavailable","handleDataAvailable","onpause","onstop","handleRecordingHasStopped","start","style","animationDuration","maxRecordingDuration","classList","add","resumeCountdownTimer","updateTimerDisplay","parentElement","remove","event","data","size","maxUploadSize","localStorage","getItem","removeItem","setItem","stopRecording","showAlert","push","M","core_formchangechecker","window","location","pathname","endsWith","set_form_changed","stopCountdownTimer","setPauseButtonLabel","animationPlayState","stop","tracks","getTracks","blob","Blob","type","src","URL","createObjectURL","notifyRecordingComplete","handleCaptureFailed","error","debug","setPlaceholderMessage","stringName","replace","toLowerCase","enableAllButtons","Date","now","clearInterval","setInterval","millisecondsRemaining","secondsRemaining","Math","round","setLabelForTimer","getTimeLabelForTimer","seconds","secs","mins","util","get_string","pad","secondsStart","innerText","val","valString","handleRecordingFetched","e","fetchRequest","target","status","response","formData","FormData","append","recordingFilename","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","XMLHttpRequest","addEventListener","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","open","wwwroot","send","readyState","JSON","parse","responseText","errorcode","loaded","total","langString","a","widgetName","innerHTML","textContent","disableOrEnableButtons","notifyButtonStatesChanged","enabled","closest","querySelectorAll","forEach","toggleProgressbarState","running","clickedButton","preventDefault","parseInt","navigator","mediaDevices","getUserMedia","mediaConstraints","then","catch","startRecording","pause","resume","uploadMediaToServer","responseType","AudioSettings","audio","VideoSettings","video","ideal","RecordRtcQuestion","questionId","settings","questionDiv","document","getElementById","result","protocol","host","indexOf","subject","ModalFactory","create","types","ALERT","title","body","modal","show","setSubmitButtonState","thisQuestion","anyRecorded","submitButton","typeInfo","mediaType","audioBitRate","videoBitRate","js_pending","js_complete"],"mappings":"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"}