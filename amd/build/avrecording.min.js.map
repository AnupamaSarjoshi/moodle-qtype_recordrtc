{"version":3,"sources":["../src/avrecording.js"],"names":["questionId","settings","M","util","js_pending","RecordRtcQuestion","js_complete","checkCanWork","navigator","mediaDevices","window","MediaRecorder","location","protocol","host","indexOf","RecorderPromise","cfg","wwwroot","then","recorderModule","Mp3MediaRecorder","workerURL","URL","createObjectURL","Blob","type","widget","mediaSettings","owner","uploadInfo","recorder","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","timeRemaining","stopTime","countdownTicker","button","querySelector","pauseButton","controlRow","mediaElement","name","noMediaPlaceholder","timeDisplay","addEventListener","e","clickedButton","target","closest","preventDefault","dataset","state","startRecording","startSaving","pause","stopRecording","resume","uploadMediaToServer","setButtonLabel","fetchRequest","XMLHttpRequest","open","src","responseType","handleRecordingFetched","send","parentElement","classList","add","remove","disableAllButtons","getUserMedia","mediaConstraints","handleCaptureStarting","catch","handleCaptureFailed","stream","srcObject","muted","play","controls","disabled","focus","worker","Worker","getRecordingOptions","ondataavailable","handleDataAvailable","onpause","onstop","handleRecordingHasStopped","start","startCountdownTimer","event","data","size","maxUploadSize","localStorage","getItem","setItem","showAlert","removeItem","push","core_formchangechecker","pathname","endsWith","set_form_changed","stopCountdownTimer","setPauseButtonLabel","resumeCountdownTimer","stop","tracks","getTracks","i","length","blob","mimeType","notifyRecordingComplete","error","Log","debug","setPlaceholderMessage","stringName","replace","toLowerCase","enableAllButtons","maxRecordingDuration","updateTimerDisplay","Date","now","clearInterval","setInterval","millisecondsRemaining","secondsRemaining","Math","round","secs","mins","innerText","get_string","pad","val","valString","status","response","formData","FormData","append","recordingFilename","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","readyState","JSON","parse","responseText","errorcode","loaded","total","langString","a","widgetName","innerHTML","textContent","options","audioBitsPerSecond","bitRate","videoBitsPerSecond","videoWidth","width","videoHeight","height","mimeTypes","isTypeSupported","disableOrEnableButtons","notifyButtonStatesChanged","enabled","querySelectorAll","forEach","AudioSettings","parseInt","audio","VideoSettings","video","ideal","questionDiv","document","getElementById","result","setSubmitButtonState","thisQuestion","typeInfo","mediaType","audioBitRate","videoBitRate","Recorder","Notification","exception","anyRecorded","submitButton","subject","ModalFactory","create","types","ALERT","title","body","modal","show"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work originally inspired this.\n *\n * This script uses some third-party JavaScript and loading that within Moodle/ES6\n * requires some contortions. The main classes here are:\n *\n * * Recorder - represents one recording widget. This works in a way that is\n *   not particularly specific to this question type.\n * * RecordRtcQuestion - represents one question, which may contain several recorders.\n *   It deals with the interaction between the recorders and the question.\n *\n * @module    qtype_recordrtc/avrecording\n * @copyright 2019 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\n\n/**\n * Verify that the question type can work. If not, show a warning.\n *\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n */\nfunction checkCanWork() {\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\n        return 'nowebrtc';\n    }\n\n    if (!(location.protocol === 'https:' || location.host.indexOf('localhost') !== -1)) {\n        return 'nothttps';\n    }\n\n    return 'ok';\n}\n\nconst RecorderPromise = import(M.cfg.wwwroot + '/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/worker.umd.js').then(() => {\n    return import(M.cfg.wwwroot + '/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/index.umd.js');\n\n}).then(recorderModule => {\n    const Mp3MediaRecorder = recorderModule.Mp3MediaRecorder;\n\n    const workerURL = URL.createObjectURL(new Blob([\n        // Now load the script (UMD version) in the Workers context.\n        \"importScripts('\" + M.cfg.wwwroot + \"/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/worker.umd.js');\",\n\n        // The above index.umd.js script exports all methods in a new mp3EncoderWorker object.\n        \"mp3EncoderWorker.initMp3MediaEncoder({vmsgWasmUrl: '\" +\n        M.cfg.wwwroot + \"/question/type/recordrtc/js/vmsg@0.4.0/vmsg.wasm'});\",\n    ], {type: 'application/javascript'}));\n\n    /**\n     * Object for actually doing the recording.\n     *\n     * The recorder can be in one of several states, which is stored in a data-state\n     * attribute on the outer span (widget). The states are:\n     *\n     *  - new:       there is no recording yet. Button shows 'Start recording' (audio) or 'Start camera' (video).\n     *  - starting:  (video only) camera has started, but we are not recording yet. Button show 'Start recording'.\n     *  - recording: Media is being recorded. Pause button visible if allowed. Main button shows 'Stop'. Countdown displayed.\n     *  - paused:    If pause was pressed. Media recording paused, but resumable. Pause button changed to say 'resume'.\n     *  - saving:    Media being uploaded. Progress indication shown. Pause button hidden if was visible.\n     *  - recorded:  Recording and upload complete. Buttons shows 'Record again'.\n     *\n     * @param {HTMLElement} widget the DOM node that is the top level of the whole recorder.\n     * @param {(AudioSettings|VideoSettings)} mediaSettings information about the media type.\n     * @param {Object} owner the object we are doing the recording for. Must provide three callback functions\n     *                       showAlert notifyRecordingComplete notifyButtonStatesChanged.\n     * @param {Object} uploadInfo object with fields uploadRepositoryId, draftItemId, contextId and maxUploadSize.\n     * @constructor\n     */\n    function Recorder(widget, mediaSettings, owner, uploadInfo) {\n        /**\n         * @type {Recorder} reference to this recorder, for use in event handlers.\n         */\n        const recorder = this;\n\n        /**\n         * @type {MediaStream} during recording, the stream of incoming media.\n         */\n        let mediaStream = null;\n\n        /**\n         * @type {MediaRecorder} the recorder that is capturing stream.\n         */\n        let mediaRecorder = null;\n\n        /**\n         * @type {Blob[]} the chunks of data that have been captured so far during the current recording.\n         */\n        let chunks = [];\n\n        /**\n         * @type {number} number of bytes recorded so far, so we can auto-stop\n         * before hitting Moodle's file-size limit.\n         */\n        let bytesRecordedSoFar = 0;\n\n        /**\n         * @type {number} when paused, the time left in milliseconds, so we can auto-stop at the time limit.\n         */\n        let timeRemaining = 0;\n\n        /**\n         * @type {number} while recording, the time we reach the time-limit, so we can auto-stop then.\n         * This is milliseconds since Unix epoch, so comparable with Date.now().\n         */\n        let stopTime = 0;\n\n        /**\n         * @type {number} intervalID returned by setInterval() while the timer is running.\n         */\n        let countdownTicker = 0;\n\n        const button = widget.querySelector('button.qtype_recordrtc-main-button');\n        const pauseButton = widget.querySelector('.qtype_recordrtc-pause-button button');\n        const controlRow = widget.querySelector('.qtype_recordrtc-control-row');\n        const mediaElement = widget.querySelector('.qtype_recordrtc-media-player ' + mediaSettings.name);\n        const noMediaPlaceholder = widget.querySelector('.qtype_recordrtc-no-recording-placeholder');\n        const timeDisplay = widget.querySelector('.qtype_recordrtc-time-left');\n\n        widget.addEventListener('click', handleButtonClick);\n        this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n        /**\n         * Handles clicks on the start/stop and pause buttons.\n         *\n         * @param {Event} e\n         */\n        function handleButtonClick(e) {\n            const clickedButton = e.target.closest('button');\n            if (!clickedButton) {\n                return; // Not actually a button click.\n            }\n            e.preventDefault();\n            switch (widget.dataset.state) {\n                case 'new':\n                case 'recorded':\n                    startRecording();\n                    break;\n                case 'starting':\n                    startSaving();\n                    break;\n                case 'recording':\n                    if (clickedButton === pauseButton) {\n                        pause();\n                    } else {\n                        stopRecording();\n                    }\n                    break;\n                case 'paused':\n                    if (clickedButton === pauseButton) {\n                        resume();\n                    } else {\n                        stopRecording();\n                    }\n                    break;\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked).\n         */\n        function startRecording() {\n\n            if (mediaSettings.name === 'audio') {\n                mediaElement.parentElement.classList.add('hide');\n                noMediaPlaceholder.classList.add('hide');\n                timeDisplay.classList.remove('hide');\n\n            } else {\n                mediaElement.parentElement.classList.remove('hide');\n                noMediaPlaceholder.classList.add('hide');\n            }\n            pauseButton?.parentElement.classList.remove('hide');\n\n            // Change look of recording button.\n            button.classList.remove('btn-outline-danger');\n            button.classList.add('btn-danger');\n\n            // Disable other question buttons when current widget stared recording.\n            disableAllButtons();\n\n            // Empty the array containing the previously recorded chunks.\n            chunks = [];\n            bytesRecordedSoFar = 0;\n            navigator.mediaDevices.getUserMedia(mediaSettings.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        }\n\n        /**\n         * Callback once getUserMedia has permission from the user to access the recording devices.\n         *\n         * @param {MediaStream} stream the stream to record.\n         */\n        function handleCaptureStarting(stream) {\n            mediaStream = stream;\n\n            // Setup the UI for during recording.\n            mediaElement.srcObject = stream;\n            mediaElement.muted = true;\n            if (mediaSettings.name === 'audio') {\n                startSaving();\n            } else {\n                mediaElement.play();\n                mediaElement.controls = false;\n\n                widget.dataset.state = 'starting';\n                setButtonLabel('startrecording');\n                widget.querySelector('.qtype_recordrtc-stop-button').disabled = false;\n            }\n\n            // Make button clickable again, to allow starting/stopping recording.\n            if (pauseButton) {\n                pauseButton.disabled = false;\n            }\n            button.disabled = false;\n            button.focus();\n        }\n\n        /**\n         * For recording types which show the media during recording,\n         * this starts the loop-back display, but does not start recording it yet.\n         */\n        function startSaving() {\n            // Initialize MediaRecorder events and start recording.\n            if (mediaSettings.name === 'audio') {\n                mediaRecorder = new Mp3MediaRecorder(mediaStream,\n                    {worker: new Worker(workerURL)});\n            } else {\n                mediaRecorder = new MediaRecorder(mediaStream,\n                    getRecordingOptions());\n            }\n\n            mediaRecorder.ondataavailable = handleDataAvailable;\n            mediaRecorder.onpause = handleDataAvailable;\n            mediaRecorder.onstop = handleRecordingHasStopped;\n            mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n            widget.dataset.state = 'recording';\n            setButtonLabel('stoprecording');\n            startCountdownTimer();\n            if (mediaSettings.name === 'video') {\n                button.parentElement.classList.add('hide');\n                controlRow.classList.remove('hide');\n                controlRow.classList.add('d-flex');\n            }\n        }\n\n        /**\n         * Callback that is called by the media system for each Chunk of data.\n         *\n         * @param {BlobEvent} event\n         */\n        function handleDataAvailable(event) {\n            if (!event.data) {\n                return; // It seems this can happen around pausing.\n            }\n\n            // Check there is space to store the next chunk, and if not stop.\n            bytesRecordedSoFar += event.data.size;\n            if (uploadInfo.maxUploadSize >= 0 && bytesRecordedSoFar >= uploadInfo.maxUploadSize) {\n\n                // Extra check to avoid alerting twice.\n                if (!localStorage.getItem('alerted')) {\n                    localStorage.setItem('alerted', 'true');\n                    stopRecording();\n                    owner.showAlert('nearingmaxsize');\n\n                } else {\n                    localStorage.removeItem('alerted');\n                }\n            }\n\n            // Store the next chunk of data.\n            chunks.push(event.data);\n\n            // Notify form-change-checker that there is now unsaved data.\n            // But, don't do this in question preview where it is just annoying.\n            if (typeof M.core_formchangechecker !== 'undefined' &&\n                !window.location.pathname.endsWith('/question/preview.php')) {\n                M.core_formchangechecker.set_form_changed();\n            }\n        }\n\n        /**\n         * Pause recording.\n         */\n        function pause() {\n            // Stop the count-down timer.\n            stopCountdownTimer();\n            setPauseButtonLabel('resume');\n            mediaRecorder.pause();\n            widget.dataset.state = 'paused';\n        }\n\n        /**\n         * Continue recording.\n         */\n        function resume() {\n            // Stop the count-down timer.\n            resumeCountdownTimer();\n            widget.dataset.state = 'recording';\n            setPauseButtonLabel('pause');\n            mediaRecorder.resume();\n        }\n\n        /**\n         * Start recording (because the button was clicked or because we have reached a limit).\n         */\n        function stopRecording() {\n            // Disable the button while things change.\n            button.disabled = true;\n\n            // Stop the count-down timer.\n            stopCountdownTimer();\n\n            // Update the button.\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            if (pauseButton) {\n                setPauseButtonLabel('pause');\n                pauseButton.parentElement.classList.add('hide');\n            }\n\n            // Ask the recording to stop.\n            mediaRecorder.stop();\n\n            // Also stop each individual MediaTrack.\n            const tracks = mediaStream.getTracks();\n            for (let i = 0; i < tracks.length; i++) {\n                tracks[i].stop();\n            }\n        }\n\n        /**\n         * Callback that is called by the media system once recording has finished.\n         */\n        function handleRecordingHasStopped() {\n            if (widget.dataset.state === 'new') {\n                // This can happens if an error occurs when recording is starting. Do nothing.\n                return;\n            }\n\n            // Set source of the media player.\n            const blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n            mediaElement.srcObject = null;\n            mediaElement.src = URL.createObjectURL(blob);\n\n            // Show audio player with controls enabled, and unmute.\n            mediaElement.muted = false;\n            mediaElement.controls = true;\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n            mediaElement.focus();\n\n            if (mediaSettings.name === 'audio') {\n                timeDisplay.classList.add('hide');\n\n            } else {\n                button.parentElement.classList.remove('hide');\n                controlRow.classList.add('hide');\n                controlRow.classList.remove('d-flex');\n            }\n\n            // Ensure the button while things change.\n            button.disabled = true;\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            widget.dataset.state = 'recorded';\n\n            if (chunks.length > 0) {\n                owner.notifyRecordingComplete(recorder);\n            }\n        }\n\n        /**\n         * Function that handles errors from the recorder.\n         *\n         * @param {DOMException} error\n         */\n        function handleCaptureFailed(error) {\n            Log.debug('Audio/video question: error received');\n            Log.debug(error);\n\n            setPlaceholderMessage('recordingfailed');\n            setButtonLabel('recordagainx');\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            widget.dataset.state = 'new';\n\n            if (mediaRecorder) {\n                mediaRecorder.stop();\n            }\n\n            // Changes 'CertainError' -> 'gumcertain' to match language string names.\n            const stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n            owner.showAlert(stringName);\n            enableAllButtons();\n        }\n\n        /**\n         * Start the countdown timer.\n         */\n        function startCountdownTimer() {\n            timeRemaining = widget.dataset.maxRecordingDuration * 1000;\n            resumeCountdownTimer();\n            updateTimerDisplay();\n        }\n\n        /**\n         * Stop the countdown timer.\n         */\n        function stopCountdownTimer() {\n            timeRemaining = stopTime - Date.now();\n            if (countdownTicker !== 0) {\n                clearInterval(countdownTicker);\n                countdownTicker = 0;\n            }\n        }\n\n        /**\n         * Start or resume the countdown timer.\n         */\n        function resumeCountdownTimer() {\n            stopTime = Date.now() + timeRemaining;\n            if (countdownTicker === 0) {\n                countdownTicker = setInterval(updateTimerDisplay, 100);\n            }\n        }\n\n        /**\n         * Update the countdown timer, and stop recording if we have reached 0.\n         */\n        function updateTimerDisplay() {\n            const millisecondsRemaining = stopTime - Date.now();\n            const secondsRemaining = Math.round(millisecondsRemaining / 1000);\n            const secs = secondsRemaining % 60;\n            const mins = Math.round((secondsRemaining - secs) / 60);\n\n            timeDisplay.innerText = M.util.get_string('timedisplay', 'qtype_recordrtc',\n                    {mins: pad(mins), secs: pad(secs)});\n\n            if (millisecondsRemaining <= 0) {\n                stopRecording();\n            }\n        }\n\n        /**\n         * Zero-pad a string to be at least two characters long.\n         *\n         * @param {number} val e.g. 1 or 10\n         * @return {string} e.g. '01' or '10'.\n         */\n        function pad(val) {\n            const valString = val + '';\n\n            if (valString.length < 2) {\n                return '0' + valString;\n            } else {\n                return '' + valString;\n            }\n        }\n\n        /**\n         * Trigger the upload of the recorded media back to Moodle.\n         */\n        function uploadMediaToServer() {\n            setButtonLabel('uploadpreparing');\n\n            // First we need to get the media data from the media element.\n            const fetchRequest = new XMLHttpRequest();\n            fetchRequest.open('GET', mediaElement.src);\n            fetchRequest.responseType = 'blob';\n            fetchRequest.addEventListener('load', handleRecordingFetched);\n            fetchRequest.send();\n        }\n\n        /**\n         * Callback called once we have the data from the media element, ready to upload to Moodle.\n         *\n         * @param {ProgressEvent} e\n         */\n        function handleRecordingFetched(e) {\n            const fetchRequest = e.target;\n            if (fetchRequest.status !== 200) {\n                // No data.\n                return;\n            }\n\n            // Blob is now the media that the audio/video tag's src pointed to.\n            const blob = fetchRequest.response;\n\n            // Create FormData to send to PHP filepicker-upload script.\n            const formData = new FormData();\n            formData.append('repo_upload_file', blob, widget.dataset.recordingFilename);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('repo_id', uploadInfo.uploadRepositoryId);\n            formData.append('itemid', uploadInfo.draftItemId);\n            formData.append('savepath', '/');\n            formData.append('ctx_id', uploadInfo.contextId);\n            formData.append('overwrite', '1');\n\n            const uploadRequest = new XMLHttpRequest();\n            uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n            uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n            uploadRequest.addEventListener('error', handleUploadError);\n            uploadRequest.addEventListener('abort', handleUploadAbort);\n            uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n            uploadRequest.send(formData);\n        }\n\n        /**\n         * Callback for when the upload completes.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadReadyStateChanged(e) {\n            const uploadRequest = e.target;\n            if (uploadRequest.readyState !== 4) {\n                return; // Not finished yet. We will get more of these events when it is.\n            }\n\n            const response = JSON.parse(uploadRequest.responseText);\n            if (response.errorcode) {\n                handleUploadError(); // Moodle sends back errors with a 200 status code for some reason!\n            }\n\n            if (uploadRequest.status === 200) {\n                // When request finished and successful.\n                setButtonLabel('recordagainx');\n                enableAllButtons();\n            } else if (uploadRequest.status === 404) {\n                setPlaceholderMessage('uploadfailed404');\n                enableAllButtons();\n            }\n        }\n\n        /**\n         * Callback for updating the upload progress.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadProgress(e) {\n            setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadError() {\n            setPlaceholderMessage('uploadfailed');\n            enableAllButtons();\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadAbort() {\n            setPlaceholderMessage('uploadaborted');\n            enableAllButtons();\n        }\n\n        /**\n         * Display a progress message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {string|null} [a] optional variable to populate placeholder with\n         */\n        function setButtonLabel(langString, a) {\n            if (!a) {\n                // Seemingly unnecessary space inside the span is needed for screen-readers.\n                a = '<span class=\"sr-only\"> ' + widget.dataset.widgetName + '</span>';\n            }\n            button.innerHTML = M.util.get_string(langString, 'qtype_recordrtc', a);\n        }\n\n        /**\n         * Display a progress message in the upload progress area.\n         *\n         * @param {string} langString\n         */\n        function setPauseButtonLabel(langString) {\n            pauseButton.innerText = M.util.get_string(langString, 'qtype_recordrtc');\n        }\n\n        /**\n         * Display a message in the upload progress area.\n         *\n         * @param {string} langString\n         */\n        function setPlaceholderMessage(langString) {\n            noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc');\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.remove('hide');\n        }\n\n        /**\n         * Select best options for the recording codec.\n         *\n         * @returns {Object}\n         */\n        function getRecordingOptions() {\n            const options = {};\n\n            // Get the relevant bit rates from settings.\n            if (mediaSettings.name === 'audio') {\n                options.audioBitsPerSecond = mediaSettings.bitRate;\n            } else if (mediaSettings.name === 'video') {\n                options.videoBitsPerSecond = mediaSettings.bitRate;\n                options.videoWidth = mediaSettings.width;\n                options.videoHeight = mediaSettings.height;\n\n                // Go through our list of mimeTypes, and take the first one that will work.\n                for (let i = 0; i < mediaSettings.mimeTypes.length; i++) {\n                    if (MediaRecorder.isTypeSupported(mediaSettings.mimeTypes[i])) {\n                        options.mimeType = mediaSettings.mimeTypes[i];\n                        break;\n                    }\n                }\n            }\n\n            return options;\n        }\n\n        /**\n         * Enable all buttons in the question.\n         */\n        function enableAllButtons() {\n            disableOrEnableButtons(true);\n            owner.notifyButtonStatesChanged();\n        }\n\n        /**\n         * Disable all buttons in the question.\n         */\n        function disableAllButtons() {\n            disableOrEnableButtons(false);\n        }\n\n        /**\n         * Disables/enables other question buttons when current widget started recording/finished recording.\n         *\n         * @param {boolean} enabled true if the button should be enabled.\n         */\n        function disableOrEnableButtons(enabled = false) {\n            widget.closest('.que').querySelectorAll('button, input[type=submit], input[type=button]').forEach(\n                function(button) {\n                    button.disabled = !enabled;\n                }\n            );\n        }\n    }\n\n    return Recorder;\n});\n\n/**\n * Object that controls the settings for recording audio.\n *\n * @param {string} bitRate desired audio bitrate.\n * @constructor\n */\nfunction AudioSettings(bitRate) {\n    this.name = 'audio';\n    this.bitRate = parseInt(bitRate, 10);\n    this.mediaConstraints = {\n        audio: true\n    };\n    this.mimeTypes = [\n        'audio/mpeg',\n    ];\n}\n\n/**\n * Object that controls the settings for recording video.\n *\n * @param {string} bitRate desired video bitrate.\n * @param {string} width desired width.\n * @param {string} height desired height.\n * @constructor\n */\nfunction VideoSettings(bitRate, width, height) {\n    this.name = 'video';\n    this.bitRate = parseInt(bitRate, 10);\n    this.width = parseInt(width, 10);\n    this.height = parseInt(height, 10);\n    this.mediaConstraints = {\n        audio: true,\n        video: {\n            width: {ideal: this.width},\n            height: {ideal: this.height}\n        }\n    };\n    this.mimeTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n        'video/webm;codecs=vp8,opus'\n    ];\n}\n\n/**\n * Represents one record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n * @constructor\n */\nfunction RecordRtcQuestion(questionId, settings) {\n    const questionDiv = document.getElementById(questionId);\n\n    // Check if the RTC API can work here.\n    const result = checkCanWork();\n    if (result === 'nothttps') {\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\n        return;\n    } else if (result === 'nowebrtc') {\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n        return;\n    }\n\n    // Make the callback functions available.\n    this.showAlert = showAlert;\n    this.notifyRecordingComplete = notifyRecordingComplete;\n    this.notifyButtonStatesChanged = setSubmitButtonState;\n    const thisQuestion = this;\n\n    // We may have more than one widget in a question.\n    questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget').forEach(function(widget) {\n        // Get the appropriate options.\n        let typeInfo;\n        if (widget.dataset.mediaType === 'audio') {\n            typeInfo = new AudioSettings(settings.audioBitRate);\n        } else {\n            typeInfo = new VideoSettings(settings.videoBitRate, settings.videoWidth, settings.videoHeight);\n        }\n\n        // Create the recorder.\n        RecorderPromise.then(Recorder => {\n            new Recorder(widget, typeInfo, thisQuestion, settings);\n            return 'Not used';\n        }).catch(Notification.exception);\n    });\n    setSubmitButtonState();\n\n    /**\n     * Set the state of the question's submit button.\n     *\n     * If any recorder does not yet have a recording, then disable the button.\n     * Otherwise, enable it.\n     */\n    function setSubmitButtonState() {\n        let anyRecorded = false;\n        questionDiv.querySelectorAll('.qtype_recordrtc-audio-widget, .qtype_recordrtc-video-widget').forEach(function(widget) {\n            if (widget.dataset.state === 'recorded') {\n                anyRecorded = true;\n            }\n        });\n        const submitButton = questionDiv.querySelector('input.submit[type=submit]');\n        if (submitButton) {\n            submitButton.disabled = !anyRecorded;\n        }\n    }\n\n    /**\n     * Show a modal alert.\n     *\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\n     * @return {Promise}\n     */\n    function showAlert(subject) {\n        return ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\n        }).then(function(modal) {\n            modal.show();\n            return modal;\n        });\n    }\n\n    /**\n     * Callback called when the recording is completed.\n     *\n     * @param {Recorder} recorder the recorder.\n     */\n    function notifyRecordingComplete(recorder) {\n        recorder.uploadMediaToServer();\n    }\n}\n\n/**\n * Initialise a record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n */\nfunction init(questionId, settings) {\n    M.util.js_pending('init-' + questionId);\n    new RecordRtcQuestion(questionId, settings);\n    M.util.js_complete('init-' + questionId);\n}\n\nexport {\n    init\n};\n"],"file":"avrecording.min.js"}